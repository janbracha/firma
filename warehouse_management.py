from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QFrame, QScrollArea, 
    QGridLayout, QLabel, QPushButton, QComboBox, QDateEdit, QTableWidget, 
    QTableWidgetItem, QMessageBox, QDialog, QFormLayout, QLineEdit, QTextEdit,
    QSpinBox, QDoubleSpinBox
)
from PyQt6.QtCore import Qt, QDate
from PyQt6.QtGui import QFont
from database import connect
from inventory_dialog import InventoryDialog

class WarehouseManagementWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Skladov√© hospod√°≈ôstv√≠ - Projekt & Develop s.r.o.")
        self.setGeometry(200, 200, 1300, 850)
        
        # Datab√°zov√© p≈ôipojen√≠
        self.db = connect()

        # Hlavn√≠ widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Hlavn√≠ scroll area pro responsive design
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_content = QWidget()
        scroll_area.setWidget(scroll_content)
        
        main_layout = QVBoxLayout(central_widget)
        main_layout.addWidget(scroll_area)
        
        layout = QVBoxLayout(scroll_content)
        layout.setSpacing(20)
        layout.setContentsMargins(30, 30, 30, 30)

        # Modern√≠ hlaviƒçka
        self.create_header(layout)
        
        # Hlavn√≠ obsah
        self.create_content(layout)
        
        # Aplikace styl≈Ø
        self.apply_modern_styles()
        
        # Vytvo≈ôen√≠ tabulky a naƒçten√≠ dat
        self.create_warehouse_tables()
        self.load_inventory()

    def create_header(self, layout):
        """Vytvo≈ô√≠ modern√≠ hlaviƒçku"""
        header_frame = QFrame()
        header_frame.setObjectName("headerFrame")
        header_layout = QHBoxLayout(header_frame)
        header_layout.setContentsMargins(20, 20, 20, 20)
        
        # Lev√° ƒç√°st - informace o sekci
        left_layout = QVBoxLayout()
        
        title_label = QLabel("üìã Skladov√© hospod√°≈ôstv√≠")
        title_label.setObjectName("titleLabel")
        left_layout.addWidget(title_label)
        
        subtitle_label = QLabel("Evidence materi√°lu, zbo≈æ√≠ a skladov√Ωch operac√≠")
        subtitle_label.setObjectName("subtitleLabel")
        left_layout.addWidget(subtitle_label)
        
        header_layout.addLayout(left_layout)
        header_layout.addStretch()
        
        layout.addWidget(header_frame)
    
    def create_content(self, layout):
        """Vytvo≈ô√≠ hlavn√≠ obsah okna"""
        
        # Akce s kartami
        actions_frame = self.create_section_frame("‚ö° Rychl√© akce", "Spr√°va skladov√Ωch operac√≠")
        actions_grid = QGridLayout()
        actions_grid.setSpacing(15)
        
        # Karty akc√≠
        actions = [
            ("‚ûï P≈ô√≠jem zbo≈æ√≠", "Naskladnƒõn√≠ materi√°lu", self.add_stock_in),
            ("‚ûñ V√Ωdej zbo≈æ√≠", "Vyskladnƒõn√≠ materi√°lu", self.add_stock_out),
            ("üì¶ Nov√° polo≈æka", "P≈ôidat nov√Ω produkt", self.add_product),
            ("üìä Inventura", "Prov√©st inventuru skladu", self.start_inventory),
        ]
        
        for i, (title, desc, func) in enumerate(actions):
            card = self.create_action_card(title, desc, func)
            actions_grid.addWidget(card, 0, i)
        
        actions_frame.layout().addLayout(actions_grid)
        layout.addWidget(actions_frame)
        
        # Aktu√°ln√≠ stav skladu
        stats_frame = self.create_section_frame("üìä P≈ôehled skladu", "Aktu√°ln√≠ stav z√°sob")
        stats_grid = QGridLayout()
        stats_grid.setSpacing(15)
        
        # Karty statistik
        self.products_card = self.create_stat_card("üì¶ Celkem polo≈æek", "0", "blue")
        self.low_stock_card = self.create_stat_card("‚ö†Ô∏è N√≠zk√© z√°soby", "0", "orange")
        self.out_stock_card = self.create_stat_card("‚ùå Vyprod√°no", "0", "red")
        self.value_card = self.create_stat_card("üí∞ Hodnota skladu", "0 Kƒç", "green")
        
        stats_grid.addWidget(self.products_card, 0, 0)
        stats_grid.addWidget(self.low_stock_card, 0, 1)
        stats_grid.addWidget(self.out_stock_card, 0, 2)
        stats_grid.addWidget(self.value_card, 0, 3)
        
        stats_frame.layout().addLayout(stats_grid)
        layout.addWidget(stats_frame)
        
        # Tabulka produkt≈Ø
        table_frame = self.create_section_frame("üìã Aktu√°ln√≠ z√°soby", "P≈ôehled v≈°ech produkt≈Ø ve skladu")
        
        # Tabulka z√°sob
        self.table = QTableWidget(0, 8)
        self.table.setObjectName("dataTable")
        self.table.setHorizontalHeaderLabels([
            "ID", "N√°zev", "Kategorie", "Mno≈æstv√≠", "Jednotka", 
            "Min. z√°soba", "Cena", "Celkov√° hodnota"
        ])
        
        # Nastaven√≠ tabulky
        self.table.setAlternatingRowColors(True)
        self.table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        
        table_frame.layout().addWidget(self.table)
        layout.addWidget(table_frame)

    def create_section_frame(self, title, subtitle):
        """Vytvo≈ô√≠ r√°m pro sekci"""
        frame = QFrame()
        frame.setObjectName("sectionFrame")
        layout = QVBoxLayout(frame)
        layout.setContentsMargins(25, 20, 25, 20)
        layout.setSpacing(15)
        
        # Hlaviƒçka sekce
        header_layout = QVBoxLayout()
        
        title_label = QLabel(title)
        title_label.setObjectName("sectionTitle")
        header_layout.addWidget(title_label)
        
        subtitle_label = QLabel(subtitle)
        subtitle_label.setObjectName("sectionSubtitle")
        header_layout.addWidget(subtitle_label)
        
        layout.addLayout(header_layout)
        
        return frame
    
    def create_action_card(self, title, description, callback):
        """Vytvo≈ô√≠ kartu pro akci"""
        card = QFrame()
        card.setObjectName("actionCard")
        card.setFixedSize(300, 120)
        card.setCursor(Qt.CursorShape.PointingHandCursor)
        
        layout = QVBoxLayout(card)
        layout.setContentsMargins(20, 15, 20, 15)
        layout.setSpacing(8)
        
        title_label = QLabel(title)
        title_label.setObjectName("cardTitle")
        layout.addWidget(title_label)
        
        desc_label = QLabel(description)
        desc_label.setObjectName("cardDescription")
        desc_label.setWordWrap(True)
        layout.addWidget(desc_label)
        
        layout.addStretch()
        
        # Kliknut√≠ na kartu
        def mousePressEvent(event):
            if event.button() == Qt.MouseButton.LeftButton:
                callback()
        
        card.mousePressEvent = mousePressEvent
        
        return card
    
    def create_stat_card(self, title, value, color):
        """Vytvo≈ô√≠ kartu pro statistiku"""
        card = QFrame()
        card.setObjectName(f"statCard_{color}")
        card.setFixedSize(300, 100)
        
        layout = QVBoxLayout(card)
        layout.setContentsMargins(20, 15, 20, 15)
        layout.setSpacing(5)
        
        title_label = QLabel(title)
        title_label.setObjectName("statTitle")
        layout.addWidget(title_label)
        
        value_label = QLabel(value)
        value_label.setObjectName("statValue")
        layout.addWidget(value_label)
        
        return card

    def apply_modern_styles(self):
        """Aplikuje modern√≠ styly"""
        self.setStyleSheet("""
            /* Hlavn√≠ okno */
            QMainWindow {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(26, 188, 156, 1.0),
                    stop:1 rgba(22, 160, 133, 1.0));
            }
            
            /* Scroll area */
            QScrollArea {
                border: none;
                background: transparent;
            }
            
            /* Header */
            #headerFrame {
                background: rgba(255, 255, 255, 0.95);
                border-radius: 15px;
                border: 1px solid rgba(255, 255, 255, 0.3);
                margin-bottom: 20px;
            }
            
            #titleLabel {
                font-size: 24px;
                font-weight: bold;
                color: #2c3e50;
                margin: 0;
            }
            
            #subtitleLabel {
                font-size: 14px;
                color: #7f8c8d;
                margin: 0;
            }
            
            /* Sekce */
            #sectionFrame {
                background: rgba(255, 255, 255, 0.95);
                border-radius: 15px;
                border: 1px solid rgba(255, 255, 255, 0.3);
                margin-bottom: 20px;
            }
            
            #sectionTitle {
                font-size: 18px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 5px;
            }
            
            #sectionSubtitle {
                font-size: 13px;
                color: #7f8c8d;
                margin-bottom: 15px;
            }
            
            /* Karty akc√≠ */
            #actionCard {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(255, 255, 255, 0.9),
                    stop:1 rgba(247, 249, 252, 0.9));
                border: 2px solid rgba(26, 188, 156, 0.1);
                border-radius: 12px;
                margin: 5px;
            }
            
            #actionCard:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(255, 255, 255, 1.0),
                    stop:1 rgba(240, 248, 255, 1.0));
                border: 2px solid rgba(26, 188, 156, 0.3);
            }
            
            #cardTitle {
                font-size: 14px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 3px;
            }
            
            #cardDescription {
                font-size: 12px;
                color: #7f8c8d;
                line-height: 1.3;
            }
            
            /* Statistick√© karty */
            #statCard_blue {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(52, 152, 219, 0.9),
                    stop:1 rgba(41, 128, 185, 0.9));
                border-radius: 12px;
                border: 2px solid rgba(41, 128, 185, 0.3);
            }
            
            #statCard_orange {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(230, 126, 34, 0.9),
                    stop:1 rgba(211, 84, 0, 0.9));
                border-radius: 12px;
                border: 2px solid rgba(211, 84, 0, 0.3);
            }
            
            #statCard_red {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(231, 76, 60, 0.9),
                    stop:1 rgba(192, 57, 43, 0.9));
                border-radius: 12px;
                border: 2px solid rgba(192, 57, 43, 0.3);
            }
            
            #statCard_green {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(46, 204, 113, 0.9),
                    stop:1 rgba(39, 174, 96, 0.9));
                border-radius: 12px;
                border: 2px solid rgba(39, 174, 96, 0.3);
            }
            
            #statTitle {
                font-size: 12px;
                font-weight: bold;
                color: white;
                margin-bottom: 5px;
            }
            
            #statValue {
                font-size: 18px;
                font-weight: bold;
                color: white;
            }
            
            /* Tabulka */
            #dataTable {
                background: white;
                alternate-background-color: #f8f9fa;
                border: 1px solid rgba(26, 188, 156, 0.2);
                border-radius: 8px;
                gridline-color: rgba(26, 188, 156, 0.1);
                font-size: 12px;
                selection-background-color: rgba(26, 188, 156, 0.2);
            }
            
            QHeaderView::section {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 rgba(26, 188, 156, 0.8),
                    stop:1 rgba(26, 188, 156, 0.6));
                color: white;
                font-weight: bold;
                font-size: 11px;
                padding: 8px;
                border: none;
                border-right: 1px solid rgba(255, 255, 255, 0.3);
            }
        """)

    def create_warehouse_tables(self):
        """Vytvo≈ô√≠ tabulky pro skladov√© hospod√°≈ôstv√≠"""
        try:
            cursor = self.db.cursor()
            
            # Tabulka produkt≈Ø
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS warehouse_products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    category TEXT,
                    description TEXT,
                    unit TEXT,
                    price REAL,
                    min_stock INTEGER DEFAULT 0,
                    current_stock INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Tabulka skladov√Ωch pohyb≈Ø
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS warehouse_movements (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    product_id INTEGER,
                    movement_type TEXT,
                    quantity INTEGER,
                    price REAL,
                    date TEXT,
                    description TEXT,
                    user_id TEXT,
                    FOREIGN KEY (product_id) REFERENCES warehouse_products (id)
                )
            """)
            
            self.db.commit()
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi vytv√°≈ôen√≠ tabulek: {str(e)}")

    def load_inventory(self):
        """Naƒçte aktu√°ln√≠ stav skladu"""
        try:
            cursor = self.db.cursor()
            cursor.execute("""
                SELECT id, name, category, current_stock, unit, min_stock, price,
                       (current_stock * price) as total_value
                FROM warehouse_products 
                ORDER BY name
            """)
            rows = cursor.fetchall()

            self.table.setRowCount(len(rows))
            
            total_products = len(rows)
            low_stock_count = 0
            out_stock_count = 0
            total_value = 0
            
            for row_idx, row in enumerate(rows):
                for col_idx, value in enumerate(row):
                    if col_idx in [6, 7]:  # Cenov√© sloupce
                        if value is not None:
                            formatted_value = f"{float(value):,.2f} Kƒç"
                        else:
                            formatted_value = "0,00 Kƒç"
                        self.table.setItem(row_idx, col_idx, QTableWidgetItem(formatted_value))
                    else:
                        self.table.setItem(row_idx, col_idx, QTableWidgetItem(str(value) if value else ""))
                
                # Statistiky
                current_stock = row[3] if row[3] else 0
                min_stock = row[5] if row[5] else 0
                value = row[7] if row[7] else 0
                
                if current_stock == 0:
                    out_stock_count += 1
                elif current_stock <= min_stock:
                    low_stock_count += 1
                    
                total_value += value
                
            # Aktualizace karet
            self.update_stat_card(self.products_card, str(total_products))
            self.update_stat_card(self.low_stock_card, str(low_stock_count))
            self.update_stat_card(self.out_stock_card, str(out_stock_count))
            self.update_stat_card(self.value_card, f"{total_value:,.2f} Kƒç")
            
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi naƒç√≠t√°n√≠ skladu: {str(e)}")
    
    def update_stat_card(self, card, value):
        """Aktualizuje hodnotu ve statistick√© kartƒõ"""
        layout = card.layout()
        if layout and layout.count() > 1:
            value_label = layout.itemAt(1).widget()
            if value_label:
                value_label.setText(value)

    def add_product(self):
        """P≈ôid√° nov√Ω produkt do skladu"""
        dialog = ProductDialog()
        if dialog.exec() == QDialog.DialogCode.Accepted:
            try:
                cursor = self.db.cursor()
                cursor.execute("""
                    INSERT INTO warehouse_products (name, category, description, unit, 
                                                  price, min_stock, current_stock) 
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (
                    dialog.name_edit.text(),
                    dialog.category_edit.text(),
                    dialog.description_edit.toPlainText(),
                    dialog.unit_edit.text(),
                    dialog.price_edit.value(),
                    dialog.min_stock_edit.value(),
                    0  # Poƒç√°teƒçn√≠ stav
                ))
                self.db.commit()
                self.load_inventory()
                QMessageBox.information(self, "√öspƒõch", "Produkt byl √∫spƒõ≈°nƒõ p≈ôid√°n!")
            except Exception as e:
                QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi p≈ôid√°v√°n√≠ produktu: {str(e)}")

    def add_stock_in(self):
        """P≈ôid√° p≈ô√≠jem zbo≈æ√≠"""
        dialog = StockMovementDialog("P≈ô√≠jem zbo≈æ√≠", self.get_products())
        if dialog.exec() == QDialog.DialogCode.Accepted:
            try:
                product_id = dialog.product_combo.currentData()
                quantity = dialog.quantity_edit.value()
                
                cursor = self.db.cursor()
                
                # Z√°znam pohybu
                cursor.execute("""
                    INSERT INTO warehouse_movements (product_id, movement_type, quantity, 
                                                   date, description) 
                    VALUES (?, ?, ?, ?, ?)
                """, (
                    product_id,
                    "P≈ô√≠jem",
                    quantity,
                    QDate.currentDate().toString("yyyy-MM-dd"),
                    dialog.description_edit.toPlainText()
                ))
                
                # Aktualizace stavu
                cursor.execute("""
                    UPDATE warehouse_products 
                    SET current_stock = current_stock + ? 
                    WHERE id = ?
                """, (quantity, product_id))
                
                self.db.commit()
                self.load_inventory()
                QMessageBox.information(self, "√öspƒõch", "P≈ô√≠jem zbo≈æ√≠ byl zaznamen√°n!")
            except Exception as e:
                QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi p≈ô√≠jmu zbo≈æ√≠: {str(e)}")

    def add_stock_out(self):
        """P≈ôid√° v√Ωdej zbo≈æ√≠"""
        dialog = StockMovementDialog("V√Ωdej zbo≈æ√≠", self.get_products())
        if dialog.exec() == QDialog.DialogCode.Accepted:
            try:
                product_id = dialog.product_combo.currentData()
                quantity = dialog.quantity_edit.value()
                
                cursor = self.db.cursor()
                
                # Kontrola dostupnosti
                cursor.execute("SELECT current_stock FROM warehouse_products WHERE id = ?", (product_id,))
                current_stock = cursor.fetchone()[0]
                
                if current_stock < quantity:
                    QMessageBox.warning(self, "Upozornƒõn√≠", 
                                      f"Nedostatek z√°sob! Dostupn√© mno≈æstv√≠: {current_stock}")
                    return
                
                # Z√°znam pohybu
                cursor.execute("""
                    INSERT INTO warehouse_movements (product_id, movement_type, quantity, 
                                                   date, description) 
                    VALUES (?, ?, ?, ?, ?)
                """, (
                    product_id,
                    "V√Ωdej",
                    quantity,
                    QDate.currentDate().toString("yyyy-MM-dd"),
                    dialog.description_edit.toPlainText()
                ))
                
                # Aktualizace stavu
                cursor.execute("""
                    UPDATE warehouse_products 
                    SET current_stock = current_stock - ? 
                    WHERE id = ?
                """, (quantity, product_id))
                
                self.db.commit()
                self.load_inventory()
                QMessageBox.information(self, "√öspƒõch", "V√Ωdej zbo≈æ√≠ byl zaznamen√°n!")
            except Exception as e:
                QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi v√Ωdeji zbo≈æ√≠: {str(e)}")

    def get_products(self):
        """Vr√°t√≠ seznam produkt≈Ø pro combo box"""
        try:
            cursor = self.db.cursor()
            cursor.execute("SELECT id, name FROM warehouse_products ORDER BY name")
            return cursor.fetchall()
        except:
            return []

    def start_inventory(self):
        """Spust√≠ inventuru"""
        dialog = InventoryDialog(self.get_products())
        if dialog.exec() == QDialog.DialogCode.Accepted:
            try:
                cursor = self.db.cursor()
                product_id = dialog.product_combo.currentData()
                real_stock = dialog.real_stock_edit.value()
                
                # Zji≈°tƒõn√≠ souƒçasn√©ho stavu
                cursor.execute("SELECT current_stock, name FROM warehouse_products WHERE id = ?", (product_id,))
                result = cursor.fetchone()
                current_stock = result[0]
                product_name = result[1]
                
                # V√Ωpoƒçet rozd√≠lu
                difference = real_stock - current_stock
                
                if difference != 0:
                    # Aktualizace stavu
                    cursor.execute("""
                        UPDATE warehouse_products 
                        SET current_stock = ? 
                        WHERE id = ?
                    """, (real_stock, product_id))
                    
                    # Z√°znam pohybu
                    movement_type = "Inventurn√≠ p≈ôebytek" if difference > 0 else "Inventurn√≠ manko"
                    cursor.execute("""
                        INSERT INTO warehouse_movements (product_id, movement_type, quantity, 
                                                       date, description) 
                        VALUES (?, ?, ?, ?, ?)
                    """, (
                        product_id,
                        movement_type,
                        abs(difference),
                        QDate.currentDate().toString("yyyy-MM-dd"),
                        f"Inventura - {dialog.notes_edit.toPlainText()}"
                    ))
                    
                    self.db.commit()
                    self.load_inventory()
                    
                    if difference > 0:
                        QMessageBox.information(self, "‚úÖ Inventura dokonƒçena", 
                                              f"P≈ôebytek u {product_name}: +{difference} ks")
                    else:
                        QMessageBox.warning(self, "‚ö†Ô∏è Inventura dokonƒçena", 
                                          f"Manko u {product_name}: {difference} ks")
                else:
                    QMessageBox.information(self, "‚úÖ Inventura dokonƒçena", 
                                          f"Stav {product_name} souhlas√≠ - ≈æ√°dn√Ω rozd√≠l.")
                    
            except Exception as e:
                QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi inventu≈ôe: {str(e)}")

    def closeEvent(self, event):
        """Uzav≈ôe datab√°zov√© p≈ôipojen√≠ p≈ôi zav≈ôen√≠ okna"""
        if hasattr(self, 'db'):
            self.db.close()
        event.accept()


class ProductDialog(QDialog):
    """Dialog pro p≈ôid√°n√≠ produktu"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Nov√Ω produkt")
        self.setFixedSize(500, 500)
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f6fa;
            }
            QLabel {
                font-size: 12px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 5px;
            }
            QLineEdit, QTextEdit, QDoubleSpinBox, QSpinBox {
                padding: 10px;
                border: 2px solid #e1e8ed;
                border-radius: 8px;
                font-size: 12px;
                background: white;
                margin-bottom: 10px;
            }
            QLineEdit:focus, QTextEdit:focus, QDoubleSpinBox:focus, QSpinBox:focus {
                border-color: #1abc9c;
            }
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #1abc9c, stop:1 #16a085);
                color: white;
                border: none;
                padding: 12px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 12px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #48c9b0, stop:1 #1abc9c);
            }
        """)
        
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # Formul√°≈ô
        form_layout = QFormLayout()
        form_layout.setSpacing(10)
        
        self.name_edit = QLineEdit()
        self.name_edit.setPlaceholderText("N√°zev produktu")
        form_layout.addRow("N√°zev:", self.name_edit)
        
        self.category_edit = QLineEdit()
        self.category_edit.setPlaceholderText("Nap≈ô. Materi√°l, N√°hradn√≠ d√≠ly...")
        form_layout.addRow("Kategorie:", self.category_edit)
        
        self.description_edit = QTextEdit()
        self.description_edit.setPlaceholderText("Popis produktu")
        self.description_edit.setMaximumHeight(80)
        form_layout.addRow("Popis:", self.description_edit)
        
        self.unit_edit = QLineEdit()
        self.unit_edit.setPlaceholderText("ks, m, kg, l...")
        form_layout.addRow("Jednotka:", self.unit_edit)
        
        self.price_edit = QDoubleSpinBox()
        self.price_edit.setMaximum(999999.99)
        self.price_edit.setSuffix(" Kƒç")
        form_layout.addRow("Cena za jednotku:", self.price_edit)
        
        self.min_stock_edit = QSpinBox()
        self.min_stock_edit.setMaximum(999999)
        form_layout.addRow("Minim√°ln√≠ z√°soba:", self.min_stock_edit)
        
        layout.addLayout(form_layout)
        
        # Tlaƒç√≠tka
        button_layout = QHBoxLayout()
        
        self.cancel_button = QPushButton("Zru≈°it")
        self.cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(self.cancel_button)
        
        self.save_button = QPushButton("Ulo≈æit")
        self.save_button.clicked.connect(self.accept)
        button_layout.addWidget(self.save_button)
        
        layout.addLayout(button_layout)


class StockMovementDialog(QDialog):
    """Dialog pro skladov√© pohyby"""
    
    def __init__(self, title, products, parent=None):
        super().__init__(parent)
        self.setWindowTitle(title)
        self.setFixedSize(500, 400)
        self.products = products
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f6fa;
            }
            QLabel {
                font-size: 12px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 5px;
            }
            QComboBox, QSpinBox, QTextEdit {
                padding: 10px;
                border: 2px solid #e1e8ed;
                border-radius: 8px;
                font-size: 12px;
                background: white;
                margin-bottom: 10px;
            }
            QComboBox:focus, QSpinBox:focus, QTextEdit:focus {
                border-color: #1abc9c;
            }
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #1abc9c, stop:1 #16a085);
                color: white;
                border: none;
                padding: 12px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 12px;
            }
        """)
        
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # Formul√°≈ô
        form_layout = QFormLayout()
        form_layout.setSpacing(10)
        
        self.product_combo = QComboBox()
        for product_id, product_name in self.products:
            self.product_combo.addItem(product_name, product_id)
        form_layout.addRow("Produkt:", self.product_combo)
        
        self.quantity_edit = QSpinBox()
        self.quantity_edit.setMaximum(999999)
        self.quantity_edit.setValue(1)
        form_layout.addRow("Mno≈æstv√≠:", self.quantity_edit)
        
        self.description_edit = QTextEdit()
        self.description_edit.setPlaceholderText("Pozn√°mka k pohybu")
        self.description_edit.setMaximumHeight(100)
        form_layout.addRow("Popis:", self.description_edit)
        
        layout.addLayout(form_layout)
        
        # Tlaƒç√≠tka
        button_layout = QHBoxLayout()
        
        self.cancel_button = QPushButton("Zru≈°it")
        self.cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(self.cancel_button)
        
        self.save_button = QPushButton("Ulo≈æit")
        self.save_button.clicked.connect(self.accept)
        button_layout.addWidget(self.save_button)
        
        layout.addLayout(button_layout)
