from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QFrame, QScrollArea, 
    QGridLayout, QLabel, QPushButton, QComboBox, QDateEdit, QTableWidget, 
    QTableWidgetItem, QMessageBox, QDialog, QFormLayout, QLineEdit, QTextEdit,
    QSpinBox, QDoubleSpinBox, QCheckBox
)
from PyQt6.QtCore import Qt, QDate
from PyQt6.QtGui import QFont
from database import connect

class ServiceMaintenanceWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Servis a √∫dr≈æba - Projekt & Develop s.r.o.")
        self.setGeometry(200, 200, 1400, 900)
        
        # Datab√°zov√© p≈ôipojen√≠
        self.db = connect()

        # Hlavn√≠ widget
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # Hlavn√≠ scroll area pro responsive design
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_content = QWidget()
        scroll_area.setWidget(scroll_content)
        
        main_layout = QVBoxLayout(central_widget)
        main_layout.addWidget(scroll_area)
        
        layout = QVBoxLayout(scroll_content)
        layout.setSpacing(20)
        layout.setContentsMargins(30, 30, 30, 30)

        # Modern√≠ hlaviƒçka
        self.create_header(layout)
        
        # Hlavn√≠ obsah
        self.create_content(layout)
        
        # Aplikace styl≈Ø
        self.apply_modern_styles()
        
        # Vytvo≈ôen√≠ tabulky a naƒçten√≠ dat
        self.create_service_tables()
        self.load_service_records()

    def create_header(self, layout):
        """Vytvo≈ô√≠ modern√≠ hlaviƒçku"""
        header_frame = QFrame()
        header_frame.setObjectName("headerFrame")
        header_layout = QHBoxLayout(header_frame)
        header_layout.setContentsMargins(20, 20, 20, 20)
        
        # Lev√° ƒç√°st - informace o sekci
        left_layout = QVBoxLayout()
        
        title_label = QLabel("üîß Servis a √∫dr≈æba")
        title_label.setObjectName("titleLabel")
        left_layout.addWidget(title_label)
        
        subtitle_label = QLabel("Pl√°nov√°n√≠ a evidence servisn√≠ch √∫kon≈Ø, oprav a √∫dr≈æby")
        subtitle_label.setObjectName("subtitleLabel")
        left_layout.addWidget(subtitle_label)
        
        header_layout.addLayout(left_layout)
        header_layout.addStretch()
        
        layout.addWidget(header_frame)
    
    def create_content(self, layout):
        """Vytvo≈ô√≠ hlavn√≠ obsah okna"""
        
        # Akce s kartami
        actions_frame = self.create_section_frame("‚ö° Rychl√© akce", "Spr√°va servisn√≠ch operac√≠")
        actions_grid = QGridLayout()
        actions_grid.setSpacing(15)
        
        # Karty akc√≠
        actions = [
            ("üîß Nov√Ω servis", "Zaznamenat servisn√≠ √∫kon", self.add_service),
            ("üìÖ Pl√°novan√° √∫dr≈æba", "Napl√°novat pravidelnou √∫dr≈æbu", self.schedule_maintenance),
            ("‚ö†Ô∏è Porucha", "Nahl√°sit poruchu", self.report_malfunction),
            ("üìä Servisn√≠ pl√°n", "Zobrazit servisn√≠ kalend√°≈ô", self.show_service_plan),
            ("üí∞ N√°klady", "P≈ôehled n√°klad≈Ø na servis", self.show_costs),
            ("üìã Certifik√°ty", "Spr√°va certifik√°t≈Ø", self.manage_certificates),
        ]
        
        for i, (title, desc, func) in enumerate(actions):
            card = self.create_action_card(title, desc, func)
            actions_grid.addWidget(card, i // 3, i % 3)
        
        actions_frame.layout().addLayout(actions_grid)
        layout.addWidget(actions_frame)
        
        # P≈ôehled servisu
        stats_frame = self.create_section_frame("üìä P≈ôehled", "Statistiky servisn√≠ch √∫kon≈Ø")
        stats_grid = QGridLayout()
        stats_grid.setSpacing(15)
        
        # Karty statistik
        self.total_card = self.create_stat_card("üîß Celkem servis≈Ø", "0", "blue")
        self.pending_card = self.create_stat_card("‚è≥ ƒåekaj√≠c√≠", "0", "orange")
        self.this_month_card = self.create_stat_card("üìÖ Tento mƒõs√≠c", "0", "green")
        self.costs_card = self.create_stat_card("üí∞ N√°klady", "0 Kƒç", "red")
        
        stats_grid.addWidget(self.total_card, 0, 0)
        stats_grid.addWidget(self.pending_card, 0, 1)
        stats_grid.addWidget(self.this_month_card, 0, 2)
        stats_grid.addWidget(self.costs_card, 0, 3)
        
        stats_frame.layout().addLayout(stats_grid)
        layout.addWidget(stats_frame)
        
        # Tabulka servisn√≠ch z√°znam≈Ø
        table_frame = self.create_section_frame("üîß Servisn√≠ z√°znamy", "P≈ôehled v≈°ech servisn√≠ch √∫kon≈Ø")
        
        # Tabulka
        self.table = QTableWidget(0, 9)
        self.table.setObjectName("dataTable")
        self.table.setHorizontalHeaderLabels([
            "ID", "Datum", "Vozidlo/Majetek", "Typ servisu", "Popis", 
            "Technik", "N√°klady", "Status", "Pozn√°mky"
        ])
        
        # Nastaven√≠ tabulky
        self.table.setAlternatingRowColors(True)
        self.table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        
        table_frame.layout().addWidget(self.table)
        layout.addWidget(table_frame)

    def create_section_frame(self, title, subtitle):
        """Vytvo≈ô√≠ r√°m pro sekci"""
        frame = QFrame()
        frame.setObjectName("sectionFrame")
        layout = QVBoxLayout(frame)
        layout.setContentsMargins(25, 20, 25, 20)
        layout.setSpacing(15)
        
        # Hlaviƒçka sekce
        header_layout = QVBoxLayout()
        
        title_label = QLabel(title)
        title_label.setObjectName("sectionTitle")
        header_layout.addWidget(title_label)
        
        subtitle_label = QLabel(subtitle)
        subtitle_label.setObjectName("sectionSubtitle")
        header_layout.addWidget(subtitle_label)
        
        layout.addLayout(header_layout)
        
        return frame
    
    def create_action_card(self, title, description, callback):
        """Vytvo≈ô√≠ kartu pro akci"""
        card = QFrame()
        card.setObjectName("actionCard")
        card.setFixedSize(280, 100)
        card.setCursor(Qt.CursorShape.PointingHandCursor)
        
        layout = QVBoxLayout(card)
        layout.setContentsMargins(20, 15, 20, 15)
        layout.setSpacing(8)
        
        title_label = QLabel(title)
        title_label.setObjectName("cardTitle")
        layout.addWidget(title_label)
        
        desc_label = QLabel(description)
        desc_label.setObjectName("cardDescription")
        desc_label.setWordWrap(True)
        layout.addWidget(desc_label)
        
        layout.addStretch()
        
        # Kliknut√≠ na kartu
        def mousePressEvent(event):
            if event.button() == Qt.MouseButton.LeftButton:
                callback()
        
        card.mousePressEvent = mousePressEvent
        
        return card
    
    def create_stat_card(self, title, value, color):
        """Vytvo≈ô√≠ kartu pro statistiku"""
        card = QFrame()
        card.setObjectName(f"statCard_{color}")
        card.setFixedSize(320, 100)
        
        layout = QVBoxLayout(card)
        layout.setContentsMargins(20, 15, 20, 15)
        layout.setSpacing(5)
        
        title_label = QLabel(title)
        title_label.setObjectName("statTitle")
        layout.addWidget(title_label)
        
        value_label = QLabel(value)
        value_label.setObjectName("statValue")
        layout.addWidget(value_label)
        
        return card

    def apply_modern_styles(self):
        """Aplikuje modern√≠ styly"""
        self.setStyleSheet("""
            /* Hlavn√≠ okno */
            QMainWindow {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(231, 76, 60, 1.0),
                    stop:1 rgba(192, 57, 43, 1.0));
            }
            
            /* Scroll area */
            QScrollArea {
                border: none;
                background: transparent;
            }
            
            /* Header */
            #headerFrame {
                background: rgba(255, 255, 255, 0.95);
                border-radius: 15px;
                border: 1px solid rgba(255, 255, 255, 0.3);
                margin-bottom: 20px;
            }
            
            #titleLabel {
                font-size: 24px;
                font-weight: bold;
                color: #2c3e50;
                margin: 0;
            }
            
            #subtitleLabel {
                font-size: 14px;
                color: #7f8c8d;
                margin: 0;
            }
            
            /* Sekce */
            #sectionFrame {
                background: rgba(255, 255, 255, 0.95);
                border-radius: 15px;
                border: 1px solid rgba(255, 255, 255, 0.3);
                margin-bottom: 20px;
            }
            
            #sectionTitle {
                font-size: 18px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 5px;
            }
            
            #sectionSubtitle {
                font-size: 13px;
                color: #7f8c8d;
                margin-bottom: 15px;
            }
            
            /* Karty akc√≠ */
            #actionCard {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(255, 255, 255, 0.9),
                    stop:1 rgba(247, 249, 252, 0.9));
                border: 2px solid rgba(231, 76, 60, 0.1);
                border-radius: 12px;
                margin: 5px;
            }
            
            #actionCard:hover {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(255, 255, 255, 1.0),
                    stop:1 rgba(255, 245, 245, 1.0));
                border: 2px solid rgba(231, 76, 60, 0.3);
            }
            
            #cardTitle {
                font-size: 13px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 3px;
            }
            
            #cardDescription {
                font-size: 11px;
                color: #7f8c8d;
                line-height: 1.3;
            }
            
            /* Statistick√© karty */
            #statCard_blue {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(52, 152, 219, 0.9),
                    stop:1 rgba(41, 128, 185, 0.9));
                border-radius: 12px;
                border: 2px solid rgba(41, 128, 185, 0.3);
            }
            
            #statCard_orange {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(230, 126, 34, 0.9),
                    stop:1 rgba(211, 84, 0, 0.9));
                border-radius: 12px;
                border: 2px solid rgba(211, 84, 0, 0.3);
            }
            
            #statCard_green {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(46, 204, 113, 0.9),
                    stop:1 rgba(39, 174, 96, 0.9));
                border-radius: 12px;
                border: 2px solid rgba(39, 174, 96, 0.3);
            }
            
            #statCard_red {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 rgba(231, 76, 60, 0.9),
                    stop:1 rgba(192, 57, 43, 0.9));
                border-radius: 12px;
                border: 2px solid rgba(192, 57, 43, 0.3);
            }
            
            #statTitle {
                font-size: 16px;
                font-weight: bold;
                color: white;
                margin-bottom: 5px;
            }
            
            #statValue {
                font-size: 18px;
                font-weight: bold;
                color: white;
            }
            
            /* Tabulka */
            #dataTable {
                background: white;
                alternate-background-color: #f8f9fa;
                border: 1px solid rgba(231, 76, 60, 0.2);
                border-radius: 8px;
                gridline-color: rgba(231, 76, 60, 0.1);
                font-size: 16px;
                selection-background-color: rgba(231, 76, 60, 0.2);
            }
            
            QHeaderView::section {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 rgba(231, 76, 60, 0.8),
                    stop:1 rgba(231, 76, 60, 0.6));
                color: white;
                font-weight: bold;
                font-size: 11px;
                padding: 8px;
                border: none;
                border-right: 1px solid rgba(255, 255, 255, 0.3);
            }
        """)

    def create_service_tables(self):
        """Vytvo≈ô√≠ tabulky pro servis a √∫dr≈æbu"""
        try:
            cursor = self.db.cursor()
            
            # Tabulka servisn√≠ch z√°znam≈Ø
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS service_records (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    date TEXT NOT NULL,
                    asset_type TEXT,
                    asset_id INTEGER,
                    asset_name TEXT,
                    service_type TEXT,
                    description TEXT,
                    technician TEXT,
                    cost REAL,
                    status TEXT DEFAULT 'Pl√°nov√°no',
                    scheduled_date TEXT,
                    completed_date TEXT,
                    next_service_date TEXT,
                    notes TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Tabulka servisn√≠ch pl√°n≈Ø
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS service_schedules (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    asset_type TEXT,
                    asset_id INTEGER,
                    service_type TEXT,
                    interval_days INTEGER,
                    last_service_date TEXT,
                    next_service_date TEXT,
                    active INTEGER DEFAULT 1,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Tabulka n√°hradn√≠ch d√≠l≈Ø
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS service_parts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    service_record_id INTEGER,
                    part_name TEXT,
                    part_number TEXT,
                    quantity INTEGER,
                    unit_price REAL,
                    total_price REAL,
                    supplier TEXT,
                    FOREIGN KEY (service_record_id) REFERENCES service_records (id)
                )
            """)
            
            self.db.commit()
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi vytv√°≈ôen√≠ tabulek: {str(e)}")

    def load_service_records(self):
        """Naƒçte servisn√≠ z√°znamy"""
        try:
            cursor = self.db.cursor()
            cursor.execute("""
                SELECT id, date, asset_name, service_type, description, 
                       technician, cost, status, notes
                FROM service_records 
                ORDER BY date DESC
            """)
            rows = cursor.fetchall()

            self.table.setRowCount(len(rows))
            
            total_services = len(rows)
            pending_count = 0
            this_month_count = 0
            total_costs = 0
            current_month = QDate.currentDate().toString("yyyy-MM")
            
            for row_idx, row in enumerate(rows):
                # Form√°tov√°n√≠ dat pro zobrazen√≠
                formatted_row = list(row)
                
                # N√°klady
                if row[6]:
                    formatted_row[6] = f"{float(row[6]):,.2f} Kƒç"
                    total_costs += float(row[6])
                else:
                    formatted_row[6] = "Nenastaveno"
                
                # Zkr√°cen√≠ dlouh√Ωch text≈Ø
                if row[4] and len(row[4]) > 30:  # description
                    formatted_row[4] = row[4][:27] + "..."
                if row[8] and len(row[8]) > 25:  # notes
                    formatted_row[8] = row[8][:22] + "..."
                
                for col_idx, value in enumerate(formatted_row):
                    self.table.setItem(row_idx, col_idx, QTableWidgetItem(str(value) if value else ""))
                
                # Statistiky
                if row[7] in ["Pl√°nov√°no", "Prob√≠h√°"]:  # status
                    pending_count += 1
                if row[1] and row[1].startswith(current_month):  # date
                    this_month_count += 1
                    
            # Aktualizace karet
            self.update_stat_card(self.total_card, str(total_services))
            self.update_stat_card(self.pending_card, str(pending_count))
            self.update_stat_card(self.this_month_card, str(this_month_count))
            self.update_stat_card(self.costs_card, f"{total_costs:,.2f} Kƒç")
            
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi naƒç√≠t√°n√≠ servisn√≠ch z√°znam≈Ø: {str(e)}")
    
    def update_stat_card(self, card, value):
        """Aktualizuje hodnotu ve statistick√© kartƒõ"""
        layout = card.layout()
        if layout and layout.count() > 1:
            value_label = layout.itemAt(1).widget()
            if value_label:
                value_label.setText(value)

    def add_service(self):
        """P≈ôid√° nov√Ω servisn√≠ z√°znam"""
        dialog = ServiceDialog()
        if dialog.exec() == QDialog.DialogCode.Accepted:
            try:
                cursor = self.db.cursor()
                cursor.execute("""
                    INSERT INTO service_records (date, asset_type, asset_name, service_type, 
                                               description, technician, cost, status, 
                                               scheduled_date, notes) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    dialog.date_edit.date().toString("yyyy-MM-dd"),
                    dialog.asset_type_edit.text(),
                    dialog.asset_name_edit.text(),
                    dialog.service_type_edit.text(),
                    dialog.description_edit.toPlainText(),
                    dialog.technician_edit.text(),
                    dialog.cost_edit.value() if dialog.cost_edit.value() > 0 else None,
                    dialog.status_combo.currentText(),
                    dialog.scheduled_date_edit.date().toString("yyyy-MM-dd"),
                    dialog.notes_edit.toPlainText()
                ))
                self.db.commit()
                self.load_service_records()
                QMessageBox.information(self, "√öspƒõch", "Servisn√≠ z√°znam byl √∫spƒõ≈°nƒõ p≈ôid√°n!")
            except Exception as e:
                QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi p≈ôid√°v√°n√≠ servisn√≠ho z√°znamu: {str(e)}")

    def save_maintenance_schedule(self, dialog):
        """Ulo≈æ√≠ pl√°n √∫dr≈æby"""
        try:
            cursor = self.db.cursor()
            cursor.execute("""
                INSERT INTO service_schedules (vehicle_id, maintenance_type, scheduled_date, 
                                             interval_days, notes)
                VALUES (?, ?, ?, ?, ?)
            """, (
                dialog.vehicle_combo.currentData(),
                dialog.maintenance_type_combo.currentText(),
                dialog.scheduled_date_edit.date().toString("yyyy-MM-dd"),
                dialog.interval_edit.value(),
                dialog.notes_edit.toPlainText()
            ))
            self.db.commit()
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi ukl√°d√°n√≠ pl√°nu √∫dr≈æby: {str(e)}")

    def save_malfunction_report(self, dialog):
        """Ulo≈æ√≠ hl√°≈°en√≠ poruchy"""
        try:
            cursor = self.db.cursor()
            cursor.execute("""
                INSERT INTO service_records (vehicle_id, service_type, description, 
                                           date, cost, notes)
                VALUES (?, ?, ?, date('now'), 0, ?)
            """, (
                dialog.vehicle_combo.currentData(),
                f"Porucha - {dialog.category_combo.currentText()}",
                dialog.description_edit.toPlainText(),
                f"Priorita: {dialog.priority_combo.currentText()}, Nahl√°sil: {dialog.reporter_edit.text()}"
            ))
            self.db.commit()
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi ukl√°d√°n√≠ hl√°≈°en√≠ poruchy: {str(e)}")

    def schedule_maintenance(self):
        """Napl√°nuje pravidelnou √∫dr≈æbu"""
        try:
            dialog = MaintenanceScheduleDialog(self.get_vehicles(), self)
            if dialog.exec() == QDialog.DialogCode.Accepted:
                self.save_maintenance_schedule(dialog)
                QMessageBox.information(self, "√öspƒõch", "Pl√°n √∫dr≈æby byl √∫spƒõ≈°nƒõ vytvo≈ôen!")
                self.load_schedules()
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi pl√°nov√°n√≠ √∫dr≈æby: {str(e)}")

    def report_malfunction(self):
        """Nahl√°s√≠ poruchu"""
        try:
            dialog = MalfunctionReportDialog(self.get_vehicles(), self)
            if dialog.exec() == QDialog.DialogCode.Accepted:
                self.save_malfunction_report(dialog)
                QMessageBox.information(self, "√öspƒõch", "Porucha byla √∫spƒõ≈°nƒõ nahl√°≈°ena!")
                self.load_records()
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi nahla≈°ov√°n√≠ poruchy: {str(e)}")

    def show_service_plan(self):
        """Zobraz√≠ servisn√≠ pl√°n"""
        try:
            dialog = ServicePlanDialog(self.get_vehicles(), self)
            dialog.exec()
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi zobrazen√≠ servisn√≠ho pl√°nu: {str(e)}")

    def show_costs(self):
        """Zobraz√≠ n√°klady na servis"""
        try:
            dialog = ServiceCostsDialog(self)
            dialog.exec()
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi zobrazen√≠ n√°klad≈Ø: {str(e)}")

    def manage_certificates(self):
        """Spr√°va certifik√°t≈Ø"""
        try:
            dialog = CertificateManagementDialog(self.get_vehicles(), self)
            dialog.exec()
        except Exception as e:
            QMessageBox.critical(self, "Chyba", f"Chyba p≈ôi spr√°vƒõ certifik√°t≈Ø: {str(e)}")

    def closeEvent(self, event):
        """Uzav≈ôe datab√°zov√© p≈ôipojen√≠ p≈ôi zav≈ôen√≠ okna"""
        if hasattr(self, 'db'):
            self.db.close()
        event.accept()


class ServiceDialog(QDialog):
    """Dialog pro p≈ôid√°n√≠ servisn√≠ho z√°znamu"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Nov√Ω servisn√≠ z√°znam")
        self.setFixedSize(600, 700)
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f6fa;
            }
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 5px;
            }
            QLineEdit, QTextEdit, QDoubleSpinBox, QDateEdit, QComboBox {
                padding: 10px;
                border: 2px solid #e1e8ed;
                border-radius: 8px;
                font-size: 16px;
                background: white;
                margin-bottom: 10px;
            }
            QLineEdit:focus, QTextEdit:focus, QDoubleSpinBox:focus, QDateEdit:focus, QComboBox:focus {
                border-color: #e74c3c;
            }
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e74c3c, stop:1 #c0392b);
                color: white;
                border: none;
                padding: 12px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ec7063, stop:1 #e74c3c);
            }
        """)
        
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # Formul√°≈ô
        form_layout = QFormLayout()
        form_layout.setSpacing(10)
        
        # Z√°kladn√≠ √∫daje
        basic_label = QLabel("üîß Z√°kladn√≠ √∫daje")
        basic_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #e74c3c; margin-top: 10px;")
        form_layout.addRow(basic_label)
        
        self.date_edit = QDateEdit(QDate.currentDate())
        self.date_edit.setCalendarPopup(True)
        form_layout.addRow("Datum:", self.date_edit)
        
        self.asset_type_edit = QLineEdit()
        self.asset_type_edit.setPlaceholderText("Vozidlo, Stroj, Za≈ô√≠zen√≠...")
        form_layout.addRow("Typ majetku:", self.asset_type_edit)
        
        self.asset_name_edit = QLineEdit()
        self.asset_name_edit.setPlaceholderText("N√°zev/oznaƒçen√≠ majetku")
        form_layout.addRow("N√°zev majetku:", self.asset_name_edit)
        
        # Servisn√≠ √∫daje
        service_label = QLabel("‚öôÔ∏è Servisn√≠ √∫daje")
        service_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #e74c3c; margin-top: 15px;")
        form_layout.addRow(service_label)
        
        self.service_type_edit = QLineEdit()
        self.service_type_edit.setPlaceholderText("Pravideln√° √∫dr≈æba, Oprava, STK...")
        form_layout.addRow("Typ servisu:", self.service_type_edit)
        
        self.description_edit = QTextEdit()
        self.description_edit.setPlaceholderText("Detailn√≠ popis servisn√≠ho √∫konu")
        self.description_edit.setMaximumHeight(80)
        form_layout.addRow("Popis:", self.description_edit)
        
        self.technician_edit = QLineEdit()
        self.technician_edit.setPlaceholderText("Jm√©no technika/servisu")
        form_layout.addRow("Technik:", self.technician_edit)
        
        # Finanƒçn√≠ √∫daje
        financial_label = QLabel("üí∞ Finanƒçn√≠ √∫daje")
        financial_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #e74c3c; margin-top: 15px;")
        form_layout.addRow(financial_label)
        
        self.cost_edit = QDoubleSpinBox()
        self.cost_edit.setMaximum(999999.99)
        self.cost_edit.setSuffix(" Kƒç")
        form_layout.addRow("N√°klady:", self.cost_edit)
        
        # Status a pl√°nov√°n√≠
        status_label = QLabel("üìä Status a pl√°nov√°n√≠")
        status_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #e74c3c; margin-top: 15px;")
        form_layout.addRow(status_label)
        
        self.status_combo = QComboBox()
        self.status_combo.addItems(["Pl√°nov√°no", "Prob√≠h√°", "Dokonƒçeno", "Zru≈°eno"])
        form_layout.addRow("Status:", self.status_combo)
        
        self.scheduled_date_edit = QDateEdit(QDate.currentDate())
        self.scheduled_date_edit.setCalendarPopup(True)
        form_layout.addRow("Pl√°novan√Ω term√≠n:", self.scheduled_date_edit)
        
        self.notes_edit = QTextEdit()
        self.notes_edit.setPlaceholderText("Dodateƒçn√© pozn√°mky")
        self.notes_edit.setMaximumHeight(60)
        form_layout.addRow("Pozn√°mky:", self.notes_edit)
        
        layout.addLayout(form_layout)
        
        # Tlaƒç√≠tka
        button_layout = QHBoxLayout()
        
        self.cancel_button = QPushButton("Zru≈°it")
        self.cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(self.cancel_button)
        
        self.save_button = QPushButton("Ulo≈æit")
        self.save_button.clicked.connect(self.accept)
        button_layout.addWidget(self.save_button)
        
        layout.addLayout(button_layout)


class MaintenanceScheduleDialog(QDialog):
    """Dialog pro pl√°nov√°n√≠ √∫dr≈æby"""
    
    def __init__(self, vehicles, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Napl√°novat √∫dr≈æbu")
        self.setFixedSize(500, 450)
        self.vehicles = vehicles
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f6fa;
            }
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 5px;
            }
            QComboBox, QSpinBox, QTextEdit, QLineEdit, QDateEdit {
                padding: 10px;
                border: 2px solid #e1e8ed;
                border-radius: 8px;
                font-size: 16px;
                background: white;
                margin-bottom: 10px;
            }
            QComboBox:focus, QSpinBox:focus, QTextEdit:focus, QLineEdit:focus, QDateEdit:focus {
                border-color: #3498db;
            }
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #3498db, stop:1 #2980b9);
                color: white;
                border: none;
                padding: 12px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #5dade2, stop:1 #3498db);
            }
        """)
        
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # Formul√°≈ô
        form_layout = QFormLayout()
        form_layout.setSpacing(10)
        
        # Z√°kladn√≠ informace
        header_label = QLabel("üìÖ Pl√°nov√°n√≠ √∫dr≈æby")
        header_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #3498db; margin-bottom: 15px;")
        form_layout.addRow(header_label)
        
        self.vehicle_combo = QComboBox()
        for vehicle_id, vehicle_name in self.vehicles:
            self.vehicle_combo.addItem(vehicle_name, vehicle_id)
        form_layout.addRow("Vozidlo:", self.vehicle_combo)
        
        self.maintenance_type_combo = QComboBox()
        maintenance_types = [
            "Pravideln√Ω servis",
            "V√Ωmƒõna oleje",
            "Kontrola brzd",
            "STK",
            "Emise",
            "Pneumatiky",
            "Klimatizace",
            "Ostatn√≠"
        ]
        self.maintenance_type_combo.addItems(maintenance_types)
        form_layout.addRow("Typ √∫dr≈æby:", self.maintenance_type_combo)
        
        self.scheduled_date_edit = QDateEdit()
        self.scheduled_date_edit.setDate(QDate.currentDate().addDays(30))
        self.scheduled_date_edit.setCalendarPopup(True)
        form_layout.addRow("Napl√°nov√°no na:", self.scheduled_date_edit)
        
        self.interval_edit = QSpinBox()
        self.interval_edit.setRange(0, 365)
        self.interval_edit.setValue(90)
        self.interval_edit.setSuffix(" dn√≠")
        form_layout.addRow("Interval opakov√°n√≠:", self.interval_edit)
        
        self.notes_edit = QTextEdit()
        self.notes_edit.setPlaceholderText("Pozn√°mky k pl√°novan√© √∫dr≈æbƒõ...")
        self.notes_edit.setMaximumHeight(80)
        form_layout.addRow("Pozn√°mky:", self.notes_edit)
        
        layout.addLayout(form_layout)
        
        # Tlaƒç√≠tka
        button_layout = QHBoxLayout()
        
        cancel_button = QPushButton("Zru≈°it")
        cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(cancel_button)
        
        save_button = QPushButton("Napl√°novat")
        save_button.clicked.connect(self.accept)
        button_layout.addWidget(save_button)
        
        layout.addLayout(button_layout)


class MalfunctionReportDialog(QDialog):
    """Dialog pro nahl√°≈°en√≠ poruchy"""
    
    def __init__(self, vehicles, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Nahl√°sit poruchu")
        self.setFixedSize(500, 500)
        self.vehicles = vehicles
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f6fa;
            }
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 5px;
            }
            QComboBox, QSpinBox, QTextEdit, QLineEdit, QDateEdit {
                padding: 10px;
                border: 2px solid #e1e8ed;
                border-radius: 8px;
                font-size: 16px;
                background: white;
                margin-bottom: 10px;
            }
            QComboBox:focus, QSpinBox:focus, QTextEdit:focus, QLineEdit:focus, QDateEdit:focus {
                border-color: #e74c3c;
            }
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #e74c3c, stop:1 #c0392b);
                color: white;
                border: none;
                padding: 12px;
                border-radius: 8px;
                font-weight: bold;
                font-size: 16px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #ec7063, stop:1 #e74c3c);
            }
        """)
        
        self.setup_ui()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # Formul√°≈ô
        form_layout = QFormLayout()
        form_layout.setSpacing(10)
        
        # Header
        header_label = QLabel("‚ö†Ô∏è Nahl√°≈°en√≠ poruchy")
        header_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #e74c3c; margin-bottom: 15px;")
        form_layout.addRow(header_label)
        
        self.vehicle_combo = QComboBox()
        for vehicle_id, vehicle_name in self.vehicles:
            self.vehicle_combo.addItem(vehicle_name, vehicle_id)
        form_layout.addRow("Vozidlo:", self.vehicle_combo)
        
        self.priority_combo = QComboBox()
        priorities = ["N√≠zk√°", "St≈ôedn√≠", "Vysok√°", "Kritick√°"]
        self.priority_combo.addItems(priorities)
        self.priority_combo.setCurrentText("St≈ôedn√≠")
        form_layout.addRow("Priorita:", self.priority_combo)
        
        self.category_combo = QComboBox()
        categories = [
            "Motor",
            "P≈ôevodovka", 
            "Brzdy",
            "Elektrick√© syst√©my",
            "Klimatizace",
            "Karoserie",
            "Pneumatiky",
            "Ostatn√≠"
        ]
        self.category_combo.addItems(categories)
        form_layout.addRow("Kategorie:", self.category_combo)
        
        self.reporter_edit = QLineEdit()
        self.reporter_edit.setPlaceholderText("Jm√©no nahla≈°ovatele")
        form_layout.addRow("Nahl√°sil:", self.reporter_edit)
        
        self.description_edit = QTextEdit()
        self.description_edit.setPlaceholderText("Detailn√≠ popis poruchy...")
        self.description_edit.setMaximumHeight(100)
        form_layout.addRow("Popis poruchy:", self.description_edit)
        
        layout.addLayout(form_layout)
        
        # Tlaƒç√≠tka
        button_layout = QHBoxLayout()
        
        cancel_button = QPushButton("Zru≈°it")
        cancel_button.clicked.connect(self.reject)
        button_layout.addWidget(cancel_button)
        
        report_button = QPushButton("Nahl√°sit poruchu")
        report_button.clicked.connect(self.accept)
        button_layout.addWidget(report_button)
        
        layout.addLayout(button_layout)


class ServicePlanDialog(QDialog):
    """Dialog pro zobrazen√≠ servisn√≠ho pl√°nu"""
    
    def __init__(self, vehicles, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Servisn√≠ pl√°n")
        self.setFixedSize(800, 600)
        self.vehicles = vehicles
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f6fa;
            }
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 5px;
            }
            QTableWidget {
                border: 2px solid #e1e8ed;
                border-radius: 8px;
                background: white;
                gridline-color: #e1e8ed;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #e1e8ed;
            }
            QTableWidget::item:selected {
                background-color: #3498db;
                color: white;
            }
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #3498db, stop:1 #2980b9);
                color: white;
                border: none;
                padding: 10px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #5dade2, stop:1 #3498db);
            }
        """)
        
        self.setup_ui()
        self.load_service_plan()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Header
        header_label = QLabel("üìä Servisn√≠ pl√°n vozidel")
        header_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #3498db; margin-bottom: 15px;")
        layout.addWidget(header_label)
        
        # Tabulka pl√°nu
        self.plan_table = QTableWidget()
        self.plan_table.setColumnCount(6)
        self.plan_table.setHorizontalHeaderLabels([
            "Vozidlo", "Typ √∫dr≈æby", "Napl√°nov√°no", "Stav", "Priorita", "Pozn√°mky"
        ])
        layout.addWidget(self.plan_table)
        
        # Tlaƒç√≠tka
        button_layout = QHBoxLayout()
        
        refresh_button = QPushButton("üîÑ Obnovit")
        refresh_button.clicked.connect(self.load_service_plan)
        button_layout.addWidget(refresh_button)
        
        export_button = QPushButton("üìã Export")
        export_button.clicked.connect(self.export_plan)
        button_layout.addWidget(export_button)
        
        close_button = QPushButton("Zav≈ô√≠t")
        close_button.clicked.connect(self.accept)
        button_layout.addWidget(close_button)
        
        layout.addLayout(button_layout)
    
    def load_service_plan(self):
        """Naƒçte servisn√≠ pl√°n"""
        # Simulace dat pro servisn√≠ pl√°n
        plan_data = [
            ("≈†koda Octavia", "Pravideln√Ω servis", "2024-02-15", "Napl√°nov√°no", "St≈ôedn√≠", "V√Ωmƒõna oleje a filtr≈Ø"),
            ("Ford Transit", "STK", "2024-03-01", "Napl√°nov√°no", "Vysok√°", "Technick√° kontrola"),
            ("BMW 320d", "Klimatizace", "2024-02-20", "Zpo≈ædƒõno", "N√≠zk√°", "Kontrola a doplnƒõn√≠"),
        ]
        
        self.plan_table.setRowCount(len(plan_data))
        
        for row, data in enumerate(plan_data):
            for col, value in enumerate(data):
                item = QTableWidgetItem(str(value))
                if col == 3:  # Stav
                    if value == "Zpo≈ædƒõno":
                        item.setBackground(Qt.GlobalColor.red)
                        item.setForeground(Qt.GlobalColor.white)
                    elif value == "Dokonƒçeno":
                        item.setBackground(Qt.GlobalColor.green)
                        item.setForeground(Qt.GlobalColor.white)
                self.plan_table.setItem(row, col, item)
        
        self.plan_table.resizeColumnsToContents()
    
    def export_plan(self):
        """Export servisn√≠ho pl√°nu"""
        QMessageBox.information(self, "Export", "Servisn√≠ pl√°n byl exportov√°n do CSV souboru.")


class ServiceCostsDialog(QDialog):
    """Dialog pro p≈ôehled n√°klad≈Ø na servis"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("N√°klady na servis")
        self.setFixedSize(700, 500)
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f6fa;
            }
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 5px;
            }
            QTableWidget {
                border: 2px solid #e1e8ed;
                border-radius: 8px;
                background: white;
                gridline-color: #e1e8ed;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #e1e8ed;
            }
            QTableWidget::item:selected {
                background-color: #f39c12;
                color: white;
            }
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f39c12, stop:1 #e67e22);
                color: white;
                border: none;
                padding: 10px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f7dc6f, stop:1 #f39c12);
            }
        """)
        
        self.setup_ui()
        self.load_costs()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Header
        header_label = QLabel("üí∞ P≈ôehled n√°klad≈Ø na servis")
        header_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #f39c12; margin-bottom: 15px;")
        layout.addWidget(header_label)
        
        # Statistiky
        stats_layout = QHBoxLayout()
        
        total_label = QLabel("Celkov√© n√°klady: 45 320 Kƒç")
        total_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #2c3e50; background: #ecf0f1; padding: 10px; border-radius: 5px;")
        stats_layout.addWidget(total_label)
        
        monthly_label = QLabel("Mƒõs√≠ƒçn√≠ pr≈Ømƒõr: 7 553 Kƒç")
        monthly_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #2c3e50; background: #ecf0f1; padding: 10px; border-radius: 5px;")
        stats_layout.addWidget(monthly_label)
        
        layout.addLayout(stats_layout)
        
        # Tabulka n√°klad≈Ø
        self.costs_table = QTableWidget()
        self.costs_table.setColumnCount(5)
        self.costs_table.setHorizontalHeaderLabels([
            "Datum", "Vozidlo", "Typ", "Popis", "N√°klady (Kƒç)"
        ])
        layout.addWidget(self.costs_table)
        
        # Tlaƒç√≠tka
        button_layout = QHBoxLayout()
        
        period_button = QPushButton("üìÖ Zmƒõnit obdob√≠")
        period_button.clicked.connect(self.change_period)
        button_layout.addWidget(period_button)
        
        export_button = QPushButton("üìä Export do Excel")
        export_button.clicked.connect(self.export_costs)
        button_layout.addWidget(export_button)
        
        close_button = QPushButton("Zav≈ô√≠t")
        close_button.clicked.connect(self.accept)
        button_layout.addWidget(close_button)
        
        layout.addLayout(button_layout)
    
    def load_costs(self):
        """Naƒçte n√°klady na servis"""
        # Simulace dat pro n√°klady
        costs_data = [
            ("2024-01-15", "≈†koda Octavia", "Pravideln√Ω servis", "V√Ωmƒõna oleje a filtr≈Ø", "3 450"),
            ("2024-01-20", "Ford Transit", "Oprava", "V√Ωmƒõna brzdov√Ωch destiƒçek", "8 900"),
            ("2024-02-01", "BMW 320d", "STK", "Technick√° kontrola", "1 200"),
            ("2024-02-05", "≈†koda Octavia", "Oprava", "V√Ωmƒõna pneumatik", "12 800"),
            ("2024-02-10", "Ford Transit", "Pravideln√Ω servis", "Kontrola a √∫dr≈æba", "4 670"),
        ]
        
        self.costs_table.setRowCount(len(costs_data))
        
        for row, data in enumerate(costs_data):
            for col, value in enumerate(data):
                item = QTableWidgetItem(str(value))
                if col == 4:  # N√°klady
                    item.setForeground(Qt.GlobalColor.darkMagenta)
                self.costs_table.setItem(row, col, item)
        
        self.costs_table.resizeColumnsToContents()
    
    def change_period(self):
        """Zmƒõn√≠ obdob√≠ pro zobrazen√≠ n√°klad≈Ø"""
        QMessageBox.information(self, "Obdob√≠", "Funkce zmƒõny obdob√≠ bude k dispozici v dal≈°√≠ verzi.")
    
    def export_costs(self):
        """Export n√°klad≈Ø do Excel"""
        QMessageBox.information(self, "Export", "N√°klady byly exportov√°ny do Excel souboru.")


class CertificateManagementDialog(QDialog):
    """Dialog pro spr√°vu certifik√°t≈Ø"""
    
    def __init__(self, vehicles, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Spr√°va certifik√°t≈Ø")
        self.setFixedSize(800, 600)
        self.vehicles = vehicles
        self.setStyleSheet("""
            QDialog {
                background-color: #f5f6fa;
            }
            QLabel {
                font-size: 16px;
                font-weight: bold;
                color: #2c3e50;
                margin-bottom: 5px;
            }
            QTableWidget {
                border: 2px solid #e1e8ed;
                border-radius: 8px;
                background: white;
                gridline-color: #e1e8ed;
            }
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #e1e8ed;
            }
            QTableWidget::item:selected {
                background-color: #9b59b6;
                color: white;
            }
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #9b59b6, stop:1 #8e44ad);
                color: white;
                border: none;
                padding: 10px;
                border-radius: 6px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #bb8fce, stop:1 #9b59b6);
            }
        """)
        
        self.setup_ui()
        self.load_certificates()
    
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Header
        header_label = QLabel("üìã Spr√°va certifik√°t≈Ø a pr≈Økaz≈Ø")
        header_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #9b59b6; margin-bottom: 15px;")
        layout.addWidget(header_label)
        
        # Upozornƒõn√≠
        warning_label = QLabel("‚ö†Ô∏è Vozidla s bl√≠≈æ√≠c√≠ se expirac√≠:")
        warning_label.setStyleSheet("font-size: 16px; font-weight: bold; color: #e74c3c; background: #ffebee; padding: 8px; border-radius: 5px;")
        layout.addWidget(warning_label)
        
        # Tabulka certifik√°t≈Ø
        self.certificates_table = QTableWidget()
        self.certificates_table.setColumnCount(6)
        self.certificates_table.setHorizontalHeaderLabels([
            "Vozidlo", "Typ certifik√°tu", "Vyd√°no", "Vypr≈°√≠", "Stav", "Akce"
        ])
        layout.addWidget(self.certificates_table)
        
        # Tlaƒç√≠tka
        button_layout = QHBoxLayout()
        
        add_button = QPushButton("‚ûï P≈ôidat certifik√°t")
        add_button.clicked.connect(self.add_certificate)
        button_layout.addWidget(add_button)
        
        remind_button = QPushButton("üîî Nastavit upom√≠nky")
        remind_button.clicked.connect(self.setup_reminders)
        button_layout.addWidget(remind_button)
        
        export_button = QPushButton("üìÑ Export p≈ôehledu")
        export_button.clicked.connect(self.export_certificates)
        button_layout.addWidget(export_button)
        
        close_button = QPushButton("Zav≈ô√≠t")
        close_button.clicked.connect(self.accept)
        button_layout.addWidget(close_button)
        
        layout.addLayout(button_layout)
    
    def load_certificates(self):
        """Naƒçte certifik√°ty"""
        # Simulace dat pro certifik√°ty
        certificates_data = [
            ("≈†koda Octavia", "STK", "2023-02-15", "2025-02-15", "Platn√Ω", "Prodlou≈æit"),
            ("Ford Transit", "STK", "2023-01-10", "2024-01-10", "Expiruje!", "Obnovit"),
            ("BMW 320d", "Emise", "2023-05-20", "2024-05-20", "Platn√Ω", "Prodlou≈æit"),
            ("≈†koda Octavia", "Poji≈°tƒõn√≠", "2024-01-01", "2024-12-31", "Platn√Ω", "Prodlou≈æit"),
            ("Ford Transit", "Emise", "2023-03-15", "2024-03-15", "Brzy vypr≈°√≠", "Obnovit"),
        ]
        
        self.certificates_table.setRowCount(len(certificates_data))
        
        for row, data in enumerate(certificates_data):
            for col, value in enumerate(data):
                item = QTableWidgetItem(str(value))
                if col == 4:  # Stav
                    if "Expiruje" in value or "vypr≈°√≠" in value:
                        item.setBackground(Qt.GlobalColor.red)
                        item.setForeground(Qt.GlobalColor.white)
                    elif value == "Platn√Ω":
                        item.setBackground(Qt.GlobalColor.green)
                        item.setForeground(Qt.GlobalColor.white)
                self.certificates_table.setItem(row, col, item)
        
        self.certificates_table.resizeColumnsToContents()
    
    def add_certificate(self):
        """P≈ôid√° nov√Ω certifik√°t"""
        QMessageBox.information(self, "Nov√Ω certifik√°t", "Dialog pro p≈ôid√°n√≠ nov√©ho certifik√°tu bude k dispozici v dal≈°√≠ verzi.")
    
    def setup_reminders(self):
        """Nastaven√≠ upom√≠nek"""
        QMessageBox.information(self, "Upom√≠nky", "Nastaven√≠ automatick√Ωch upom√≠nek bude k dispozici v dal≈°√≠ verzi.")
    
    def export_certificates(self):
        """Export p≈ôehledu certifik√°t≈Ø"""
        QMessageBox.information(self, "Export", "P≈ôehled certifik√°t≈Ø byl exportov√°n do PDF souboru.")
